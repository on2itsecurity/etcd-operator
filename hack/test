#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# KUBECONFIG can be an empty string and so needs to be explicitly declared to avoid an unbound variable error
KUBECONFIG=${KUBECONFIG:-""}

if [ -z "${PASSES-}" ]; then
	PASSES="e2e e2eslow upgrade"
fi

function fmt_pass {
	# was already broken, not fixing for now
	if ! "./hack/k8s/codegen/verify-generated.sh"; then
		exit 1
	fi
	
	DOCKER_REPO_ROOT="/go/src/github.com/on2itsecurity/etcd-operator"
	docker run --rm \
		-v "${PWD}":"${DOCKER_REPO_ROOT}" \
		-w "${DOCKER_REPO_ROOT}" \
		gcr.io/coreos-k8s-scale-testing/etcd-operator-builder:0.4.1-2 \
		"./hack/fmt_pass"
}

function e2e_pass {
	: ${TEST_S3_BUCKET:?"Need to set TEST_S3_BUCKET"}
	: ${TEST_AWS_SECRET:?"Need to set TEST_AWS_SECRET"}

	for i in {1..2}; do
	    /bin/etcd-operator-e2e -test.timeout 30m -test.failfast -test.parallel 4 \
		 --kubeconfig=$KUBECONFIG --operator-image=$OPERATOR_IMAGE --namespace=${TEST_NAMESPACE} --retry-attempts 24
	done
}

function e2eslow_pass {
	for i in {1..2}; do
		/bin/etcd-operator-e2eslow -timeout 30m -test.failfast -test.parallel 4  \
			--kubeconfig=$KUBECONFIG --operator-image=$OPERATOR_IMAGE --namespace=${TEST_NAMESPACE} --retry-attempts 24
	done
}

function upgrade_pass {
	# Run all the tests by default
	UPGRADE_TEST_SELECTOR=${UPGRADE_TEST_SELECTOR:-.*}
	/bin/etcd-operator-upgradetest -timeout 30m  -test.failfast -test.parallel 4  \
		-args --kubeconfig=$KUBECONFIG --kube-ns=$TEST_NAMESPACE \
		--retry-attempts 24 \
		--old-image=$UPGRADE_FROM \
		--new-image=$UPGRADE_TO
}

function unit_pass {
	# was already broken, not fixing for now
	DOCKER_REPO_ROOT="/go/src/github.com/on2itsecurity/etcd-operator"
	docker run --rm \
		-v "${PWD}":"${DOCKER_REPO_ROOT}" \
		-w "${DOCKER_REPO_ROOT}" \
		-e "CODECOV_TOKEN" \
		golang:1.11.5 \
		"./hack/unit_test"
}

for p in $PASSES
do
	${p}_pass
done

echo "test success ==="
